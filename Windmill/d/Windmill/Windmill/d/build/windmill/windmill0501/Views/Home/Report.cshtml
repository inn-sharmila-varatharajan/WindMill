@{
    Layout = "~/Views/Shared/_LayoutDash.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
    <style>
        .container {
            position: relative;
            left: 2pc;
        }

        body {
            background-color: #eee;
        }

        table th, table td {
            text-align: center;
        }

        table tr:nth-child(even) {
            background-color: #e4e3e3
        }

        th {
            background: #333;
            color: #fff;
        }

        .pagination {
            margin: 0;
        }

            .pagination li:hover {
                cursor: pointer;
            }

        .header_wrap {
            padding: 30px 0;
        }

        .num_rows {
            width: 20%;
            float: left;
        }

        .tb_search {
            width: 20%;
        }

        .pagination-container {
            width: 70%;
            float: left;
        }

        .rows_count {
            width: 20%;
            float: right;
            text-align: right;
            color: #999;
        }

        .datehead {
            position: relative;
            top: 10px;
        }

        .form-control {
            font-size: initial;
            position: relative;
            bottom: 5px;
        }

        .text-black {
            display: inline-block;
            vertical-align: middle;
        }

        .btn-submit {
            background-color: #337ab7;
            color: black;
        }

        .text-lg-start {
            text-align-last: left;
        }

        p {
            text-indent: 3px;
        }

        .push1 {
            position: relative;
            right: 42pc;
        }

        #btnExport {
            width: 40px;
            height: 40px;
        }

        .my-custom-scrollbar {
           
          height:250px;
        position:relative;
            overflow:auto;
          
        }
    </style>
    <script>
        let fromdate;
        let todate;
            var weburl= '@System.Configuration.ConfigurationManager.AppSettings["URL"]';
        $(document).ready(function () {



            var now = new Date();
            var day = ("0" + now.getDate()).slice(-2);
            var month = ("0" + (now.getMonth() + 1)).slice(-2);
            var today = now.getFullYear() + "-" + (month) + "-" + (day);
            fromdate = now.getFullYear() + "-" + (month) + "-" + (day);
            todate = now.getFullYear() + "-" + (month) + "-" + (day);
            $('#fromdatechange').val(today);
            $('#fromdatechange1').val(today);

            fromdatechange.max = new Date().toISOString().split("T")[0];
            fromdatechange1.max = new Date().toISOString().split("T")[0];
           // getallclosedtickets(fromdate, todate);
            getdeviceid();




            // SI SETTING

            //ROWS SHOWING FUNCTION

        });

        function datechange(e) {
            fromdate = e.target.value;

        }

        $('#fromdatechange').change(function () {
            fromdate = this.value;


            // spinner.show();
            //GetItem(selecteddate);
        });
        $('#fromdatechange1').change(function () {
            todate = this.value;


            // spinner.show();
            //GetItem(selecteddate);
        });
        $(function () {
            // Just to append id number for each row
            default_index();

        });
        function isMoreThan30DaysAgo(date) {
            //                   days  hours min  sec  ms
            const thirtyDaysInMs = 30 * 24 * 60 * 60 * 1000;
            const timestampThirtyDaysAgo = new Date(todate) - thirtyDaysInMs;


            if (timestampThirtyDaysAgo > date) {


                return true;
            } else {


                return false;
            }
        }




        function submit() {

            if (fromdate > todate) {
                alert("todate should be greater from fromdate");
                todate = today;
                $('#todatechange').val(today);
            }
            else if (isMoreThan30DaysAgo(new Date(fromdate)) == true) {
                alert("Please select date below 30 Days");
            }
            else {
                let f = document.getElementById('deviceid').value;
                getallclosedtickets(fromdate, todate,f);
            }
        }

        function showig_rows_count(maxRows, pageNum, totalRows) {
            //Default rows showing
            var end_index = maxRows * pageNum;
            var start_index = ((maxRows * pageNum) - maxRows) + parseFloat(1);
            var string = 'Showing ' + start_index + ' to ' + end_index + ' of ' + totalRows + ' entries';
            $('.rows_count').html(string);
        }

        // CREATING INDEX
        function default_index() {
            $('table tr:eq(0)').prepend('<th> S.No </th>')

            var id = 0;

            $('table tr:gt(0)').each(function () {
                id++
                $(this).prepend('<td>' + id + '</td>');
            });
        }

        // All Table search script
        function FilterkeyWord_all_table() {

            // Count td if you want to search on all table instead of specific column

            var count = $('.table').children('tbody').children('tr:first-child').children('td').length;

            // Declare variables
            var input, filter, table, tr, td, i;
            input = document.getElementById("search_input_all");
            var input_value = document.getElementById("search_input_all").value;
            filter = input.value.toLowerCase();
            if (input_value != '') {
                table = document.getElementById("table-id");
                tr = table.getElementsByTagName("tr");

                // Loop through all table rows, and hide those who don't match the search query
                for (i = 1; i < tr.length; i++) {

                    var flag = 0;

                    for (j = 0; j < count; j++) {
                        td = tr[i].getElementsByTagName("td")[j];
                        if (td) {

                            var td_text = td.innerHTML;
                            if (td.innerHTML.toLowerCase().indexOf(filter) > -1) {
                                //var td_text = td.innerHTML;
                                //td.innerHTML = 'shaban';
                                flag = 1;
                            } else {
                                //DO NOTHING
                            }
                        }
                    }
                    if (flag == 1) {
                        tr[i].style.display = "";
                    } else {
                        tr[i].style.display = "none";
                    }
                }
            } else {
                //RESET TABLE
                $('#maxRows').trigger('change');
            }
        }
        function getPagination(table) {

            $('#maxRows').on('change', function () {
                $('.pagination').html('');						// reset pagination div
                var trnum = 0;									// reset tr counter
                var maxRows = parseInt($(this).val());			// get Max Rows from select option

                var totalRows = $(table + ' tbody tr').length;		// numbers of rows
                $(table + ' tr:gt(0)').each(function () {			// each TR in  table and not the header
                    trnum++;									// Start Counter
                    if (trnum > maxRows) {						// if tr number gt maxRows

                        $(this).hide();							// fade it out
                    } if (trnum <= maxRows) { $(this).show(); }// else fade in Important in case if it ..
                });											//  was fade out to fade it in
                if (totalRows > maxRows) {						// if tr total rows gt max rows option
                    var pagenum = Math.ceil(totalRows / maxRows);	// ceil total(rows/maxrows) to get ..
                    //	numbers of pages
                    for (var i = 1; i <= pagenum;) {			// for each page append pagination li
                        $('.pagination').append('<li data-page="' + i + '">\
								      <span>'+ i++ + '<span class="sr-only">(current)</span></span>\
								    </li>').show();
                    }											// end for i


                } 												// end if row count > max rows
                $('.pagination li:first-child').addClass('active'); // add active class to the first li


                //SHOWING ROWS NUMBER OUT OF TOTAL DEFAULT
                showig_rows_count(maxRows, 1, totalRows);
                //SHOWING ROWS NUMBER OUT OF TOTAL DEFAULT

                $('.pagination li').on('click', function (e) {		// on click each page
                    e.preventDefault();
                    var pageNum = $(this).attr('data-page');	// get it's number
                    var trIndex = 0;							// reset tr counter
                    $('.pagination li').removeClass('active');	// remove active class from all li
                    $(this).addClass('active');					// add active class to the clicked


                    //SHOWING ROWS NUMBER OUT OF TOTAL
                    showig_rows_count(maxRows, pageNum, totalRows);
                    //SHOWING ROWS NUMBER OUT OF TOTAL



                    $(table + ' tr:gt(0)').each(function () {		// each tr in table not the header
                        trIndex++;								// tr index counter
                        // if tr index gt maxRows*pageNum or lt maxRows*pageNum-maxRows fade if out
                        if (trIndex > (maxRows * pageNum) || trIndex <= ((maxRows * pageNum) - maxRows)) {
                            $(this).hide();
                        } else { $(this).show(); } 				//else fade in
                    }); 										// end of for each tr in table
                });										// end of on click pagination list
            });
            // end of on select change

            // END OF PAGINATION

        }

        async function getdeviceid() {

            let url = weburl + "api/GetDashboardController/getdeviceid/";

            axios.get(url).then

                (data => {

                    console.log(data.data);
                    let rowhtml = "";
                    var optionsAsString = "";

                    if (data.data.length == 0) {
                        return;
                    }
                    for (var i = 0; i < data.data.length; i++) {
                        optionsAsString += "<option value='" + data.data[i]['result'] + "'>" + data.data[i]['name'] + "</option>";
                    }
                    $('select[name="deviceid"]').append(optionsAsString);

                    let device = document.getElementById('deviceid').value;

                    getallclosedtickets(fromdate, todate, device );

                }).catch(err => alert(err));
        }


        async function getallclosedtickets(fromdate,todate,deviceid) {

            let url = weburl + "api/GetDashboardController/getallclosedtickets/" + fromdate + "/" + todate + "/" + deviceid;

            axios.get(url).then

                (data => {

                    console.log(data.data);
                    var row = '', row1 = '', row2 = '', row3 = '';
                    let rowhtml = "";


                    if (data.data.length == 0) {

                        document.getElementById("reportdatas").innerHTML = "No Datas";
                        document.getElementById("reportdatas1").innerHTML = "No Datas";
                        getPagination('#table1');
                        $('#maxRows').trigger('change');

                        return;
                    }
                    for (i = 0; i < data.data.length; i++) {
                        let obj = data.data[i];


                        rowhtml += `<tr>
  <td>${i + 1}</td>
                        <td>${obj.device}</td>
                        <td>${obj.intime.replace('T', ' ')}</td>
 <td>${obj.outtime.replace('T', ' ')}</td>
 <td>${obj.duration}</td>
                        </tr>`;

                    }
                    document.getElementById("reportdatas").innerHTML = rowhtml;
                    document.getElementById("reportdatas1").innerHTML = rowhtml;
                    getPagination('#table1');
                    $('#maxRows').trigger('change');

                }).catch(err => alert(err));
        }


        function exportReportToExcel() {
            var tab_text = "<table border='2px'><tr bgcolor='#87AFC6'>";
            var textRange; var j = 0;
            tab = document.getElementById('table2'); // id of table

            for (j = 0; j < tab.rows.length; j++) {
                tab_text = tab_text + tab.rows[j].innerHTML + "</tr>";
                //tab_text=tab_text+"</tr>";
            }

            tab_text = tab_text + "</table>";
            tab_text = tab_text.replace(/<A[^>]*>|<\/A>/g, "");//remove if u want links in your table
            tab_text = tab_text.replace(/<img[^>]*>/gi, ""); // remove if u want images in your table
            tab_text = tab_text.replace(/<input[^>]*>|<\/input>/gi, ""); // reomves input params

            var ua = window.navigator.userAgent;
            var msie = ua.indexOf("MSIE ");

            if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))      // If Internet Explorer
            {
                txtArea1.document.open("txt/html", "replace");
                txtArea1.document.write(tab_text);
                txtArea1.document.close();
                txtArea1.focus();
                sa = txtArea1.document.execCommand("SaveAs", true, "Say Thanks to Sumit.xls");
            }
            else                 //other browser not tested on IE 11
                sa = window.open('data:application/vnd.ms-excel,' + encodeURIComponent(tab_text));

            return (sa);
        }

        function pdf() {
            var doc = new jsPDF(this.pdfOrientation, 'pt', this.pdfFormat);
            var res = doc.autoTableHtmlToJson(document.getElementById("table2"));
            doc.autoTable(res.columns, res.data, {
                margin: { top: 40, horizontal: 10 }, startY: false, theme: 'grid', pageBreak:
                    'always', tableWidth: 'auto', columnWidth: 'wrap', showHeader: 'everyPage',
                tableLineColor: 200, tableLineWidth: 0,
                columnStyles: {
                    0: { columnWidth: 'auto' }, 1: { columnWidth: 'auto' }, 2: { columnWidth: 'auto' }, 3:
                        { columnWidth: 'auto' }, 4: { columnWidth: 'auto' },
                    5: { columnWidth: 'auto' }, 6: { columnWidth: 'auto' }, 7: { columnWidth: 'auto' }, 8:
                        { columnWidth: 'auto' }
                },
                headerStyles: { theme: 'grid' },
                styles: {
                    overflow: 'linebreak', columnWidth: 'wrap', font: 'arial', fontSize: 10,
                    cellPadding: 8, overflowColumns: 'linebreak'
                },
            });
            doc.save('Report.pdf');
        }
    </script>
</head>
<body>
   

        <div class="container">
            <div class="header_wrap">
                @*<div class="date">
                <h6 class="float-center">From</h6>
                <input type="date" id="fromdatechange" onchange="datechange(event);">
            </div>*@





                <div class="d-flex ">
                    <div class="btn-group">
                        <h4 class="datehead">From</h4>
                        <input class="ml-2" type="date" id="fromdatechange" onchange="datechange(event);">
                    </div>
                    <div class="btn-group">
                        <h4 class="ml-5 datehead">To</h4>
                        <input class="ml-2" type="date" id="fromdatechange1" onchange="datechange(event);">
                    </div>
                    <h4 class="ml-5">Select Device</h4>
                    <div class="dropdown" style="margin-left:10px;">

                        <select name="deviceid" id="deviceid" style="height:50px;">
                        </select>


                    </div>


                    <div class="btn-group mt-2 col-md-12">
                        <button class="btn-submit" style="border-radius: 8px; width: 70px; height: 40px;" type="submit" value="Submit" onclick="submit();">Submit</button>


                    </div>

                    <div class="d-flex push1">
                        <div class="btn-group ">
                            <image src="../assets/excel.png" id="btnExport" onclick="exportReportToExcel(this)"></image>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                            <image src="../assets/pdf.png" id="btnExport" onclick="pdf()"></image>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                        </div>
                    </div>



                    @*<div class="btn-group mt-2 col-md-12">
                    <button type="submit" value="Submit" onclick="submit();">Submit</button>
                </div>*@
                </div>
                <br />
                <div class="num_rows d-flex">


                    <p>Show </p>
                    <p>
                        <select class="form-control" name="state" id="maxRows">


                          
                            <option value="10">
                                10
                            </option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>

                    </p>
                    <p>data </p>
                    <p>per</p>
                    <p>page</p>

                </div>
                <div class="tb_search" hidden>
                    <input type="text" id="search_input_all" onkeyup="FilterkeyWord_all_table()" placeholder="Search.." class="form-control">
                </div>
            </div>
            <div class="row" style="width:100% !important">
                <div class="col-lg-12 table-wrapper-scroll-y my-custom-scrollbar">
                    <table class="table table-bordered table-striped mb-0"
                           id="table1">


                        <thead>
                            <tr>

                                <th>Device Id</th>
                                <th>Opened On</th>
                                <th>Closed On</th>
                                <th>Duration (in mins)</th>
                            </tr>
                        </thead>
                        <tbody id="reportdatas">
                        </tbody>
                    </table>
                </div>

                <table class="table table-striped table-class" id="table2" hidden>


                    <thead>
                        <tr>

                            <th>Device Id</th>
                            <th>Opened On</th>
                            <th>Closed On</th>
                            <th>Duration (in mins)</th>
                        </tr>
                    </thead>
                    <tbody id="reportdatas1">
                    </tbody>
                </table>
            </div>
                <!--		Start Pagination -->
                <div class='pagination-container mt-4' >
                    <nav>
                        <ul class="pagination" style="overflow:auto;">
                            <!--	Here the JS Function Will Add the Rows -->
                        </ul>
                    </nav>
                </div>
                <div class="rows_count">Showing 11 to 20 of 91 entries</div>

            <!-- 		End of Container -->
            <!--  Developed By Yasser Mas -->

        </div>
</body>

</html>
